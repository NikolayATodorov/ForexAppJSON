package com.forex.test.domain;

import static com.forex.test.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class ExchangeRateAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertExchangeRateAllPropertiesEquals(ExchangeRate expected, ExchangeRate actual) {
        assertExchangeRateAutoGeneratedPropertiesEquals(expected, actual);
        assertExchangeRateAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertExchangeRateAllUpdatablePropertiesEquals(ExchangeRate expected, ExchangeRate actual) {
        assertExchangeRateUpdatableFieldsEquals(expected, actual);
        assertExchangeRateUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertExchangeRateAutoGeneratedPropertiesEquals(ExchangeRate expected, ExchangeRate actual) {
        assertThat(expected)
            .as("Verify ExchangeRate auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertExchangeRateUpdatableFieldsEquals(ExchangeRate expected, ExchangeRate actual) {
        assertThat(expected)
            .as("Verify ExchangeRate relevant properties")
            .satisfies(e -> assertThat(e.getBase()).as("check base").isEqualTo(actual.getBase()))
            .satisfies(e -> assertThat(e.getTimestamp()).as("check timestamp").isEqualTo(actual.getTimestamp()))
            .satisfies(e -> assertThat(e.getUsd()).as("check usd").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getUsd()))
            .satisfies(e -> assertThat(e.getGbp()).as("check gbp").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getGbp()))
            .satisfies(e -> assertThat(e.getChf()).as("check chf").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getChf()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertExchangeRateUpdatableRelationshipsEquals(ExchangeRate expected, ExchangeRate actual) {}
}
